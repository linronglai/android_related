1.返回(return@XXX)与跳转
  条件(if，when)与循环(for)
2.作用域run,also,let,apply
      对象引用       返回值           使用场景
let     it        最后一行代码        判空场景 XX?.let{}
run     this      最后一行代码
also    it        返回对象本身        额外的操作，例如获取ab后打印日志
apply   this      返回对象本身        对bean进行复制操作

注意下面函数定义的返回值差别（Unit代表返回的是上下文对象本身，R代表表达式最后一行）
以及T.()和(T)的差别：T.()代表接受的是上下文对象本身，使用this来获取属性及方法；(T)代表使用lamda表达式，上下文对象是lamda表达式的参数
全都是泛型T的扩展函数
public inline fun <T> T.also(block: (T) -> Unit): T
public inline fun <T> T.apply(block: T.() -> Unit): T 

public inline fun <T, R> T.let(block: (T) -> R): R
public inline fun <T, R> T.run(block: T.() -> R): R
3.类与对象
  3.1 setter和getter ，以及field字段
  3.2 密封类(seal class)和密封接口(seal interface)
     (1)密封类不能被实例化
  3.3 数据类
4.函数
  扩展类型函数
  T.()->unit的含义：扩展函数类型
5.泛型的概念：out, in, where
  解决泛型的协变问题，及String是Object子类，但是List<String>也成为List<Object>子类
  (1) out:类似于java中的 <? extend Number>，允许将T及子类型传出
      in: 类似于java中的 <? super Number>， 允许将T及子类型传入
  (2) out规定了集合中的上界（例如集合都是Number的子类）。
      知道了元素的上界，就可以用上界引用集合中的元素，因此可以从中获取元素。
      但是不能往集合中增加元素，因为对于编译器来说，只知道元素的上界，不知道具体是哪种子类。
      生产者
  (3)in 规定了集合的下界（换句话说集合中的元素都是Number的父类），
      因为编译器不知道集合中具体是哪个父类，所以无法用某个子类来引用父类。
      但是可以往集合中增加元素，因为元素是父类的子类，往里面增加元素不会出错。
6.协程
